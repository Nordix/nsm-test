#! /bin/sh
##
## nsm-ovs_test --
##
##   Test script for nsm-ovs executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/nsm

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
	tlog "$(kubectl version --short=true | grep Server)"
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}

cmd_tcase_ifup() {
	local iface=eth2
	test -n "$1" && iface=$1
	tcase "Interface up [$iface]"
	echo 0 > /proc/sys/net/ipv6/conf/$iface/accept_dad
	ip link set up dev $iface
	#ethtool -K $iface tx off
}

cmd_tcase_start_nsm() {
	tcase "Start NSM base"
	local ver=$(grep image: $yamld/nsmgr.yaml | cut -d: -f3 | head -1)
	tlog "NSM version [$ver]"
	test -n "$NSM_REGISTRY" || NSM_REGISTRY=k8s
	kubectl apply -f $yamld/registry-$NSM_REGISTRY.yaml || tdie
	kubectl apply -f $yamld/nsmgr.yaml || tdie
	#kubectl apply -f $yamld/nsm-base.yaml || tdie
	test_deployment registry-$NSM_REGISTRY 180
	test_daemonset nsmgr 30
}

cmd_tcase_start_forwarder() {
	local f=$yamld/forwarder-$NSM_FORWARDER.yaml
	test "$HOST_OVS" = "yes" && f=$yamld/forwarder-host-ovs.yaml
	tcase "Start NSM forwarder-$(basename $f)"
	test -r $f || tdie "Not readable [$f]"
	kubectl apply -f $f || tdie
	test_daemonset forwarder-$NSM_FORWARDER 120 || tdie
}

cmd_tcase_start_nse() {
	local nse=nse-remote-vlan
	test -n "$1" && nse=$1
	tcase "Start NSE $nse"
	local f=$yamld/$nse.yaml
	test -r $f || tdie "Not readable [$f]"
	kubectl apply -f $f || tdie
	test_deployment $nse 120 || tdie
}

cmd_tcase_start_nsc() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Start NSC $nsc"
	kubectl apply -f $yamld/$nsc.yaml || tdie
	test_deployment $nsc 120 || tdie
}

cmd_tcase_collect_addresses() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Collect NSC addresses from $nsc"
	local pod
	mkdir -p $tmp
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		echo $pod >> $tmp/out
		pushv 60
		tex "kubectl exec $pod -- ip addr show dev nsm-1 > /dev/null 2>&1" || tdie "No nsm-1 in $pod"
		tlog "Found interface nsm-1 in pod [$pod]"
		kubectl exec $pod -- ip addr show dev nsm-1 >> $tmp/out \
			|| tdie "Get addresses in [$pod]"
	done
	cat $tmp/out
	grep -Eo '169\.254\.10[0-9]\.[0-9]+/[0-9]+' $tmp/out > /tmp/adr
	grep -Eo '100:10[0-9]::[0-9]+/[0-9]+' $tmp/out >> /tmp/adr
	#cat /tmp/adr >&2
	return 0
}

cmd_tcase_internal_ping() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Ping pod-to-pods in $nsc"
	local pod ipm ip
	for ipm in $(cat /tmp/adr); do
		ip=$(echo $ipm | cut -d/ -f1)
		tlog "ping address $ip"
	done
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		for ipm in $(cat /tmp/adr); do
			ip=$(echo $ipm | cut -d/ -f1)
			tex kubectl exec $pod -- ping -W1 -c1 $ip || tdie "$pod $ip"
		done
	done
}

cmd_tcase_setup_vlan() {
	local iface=eth3
	test -n "$1" && iface=$1
	test -n "$__tag" || __tag=100
    tcase "Setup vlan on interface [$iface.$__tag]"
    # Note that eth2 on the VMs is eth3 on router vm-202
	ip link show $iface.$__tag 2>&1 && return 0
	ip link show $iface 2>&1 || tdie "invalid iface $iface"

    echo 0 > /proc/sys/net/ipv6/conf/$iface/accept_dad
    ip link set up $iface
    ethtool -K $iface tx off
    ip link add link $iface name $iface.$__tag type vlan id $__tag
    echo 0 > /proc/sys/net/ipv6/conf/$iface.$__tag/accept_dad
    ip link set up dev $iface.$__tag
	local n=100
	test "$iface" = "eth4" && n=102
    ip addr add 169.254.$n.254/24 dev $iface.$__tag
    ip -6 addr add 100:$n::254/64 dev $iface.$__tag
}

cmd_tcase_external_ping() {
	tcase "Ping the nsc's from router vm-202"
	pushv 30
	local ipm ip
	# DAD causes a delay before addresses are usable
	for ipm in $(cat /tmp/adr); do
		ip=$(echo $ipm | cut -d/ -f1)
		tex "ping -c1 -W1 $ip" || tdie "$ip"
	done
	popv
}

start_nc_server() {
	local pods=0 pod nsc=$1
	shift
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		pods=$((pods + 1))
		kubectl exec $pod -- killall nc 2>&1
		kubectl exec $pod -- sh -c \
			"nc -lk $@ -p 6000 -e hostname > /dev/null < /dev/null 2>&1 &"
	done
	test $pods -gt 0 || tdie "No pods app=$nsc"
}

stop_nc_server() {
	local pods=0 pod
	for pod in $(kubectl get pods -l app=$1 -o name); do
		pods=$((pods + 1))
		kubectl exec $pod -- killall nc 2>&1
	done
	test $pods -gt 0 || tdie "No pods app=$1"
}

cmd_tcase_start_tcp_servers() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Start TCP servers in NSCs $nsc"
	start_nc_server $nsc
}

cmd_tcase_internal_tcp() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Internal pod-to-pods TCP $nsc"
	local pods=0 pod ipm ip
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		pods=$((pods + 1))
		for ipm in $(cat /tmp/adr); do
			ip=$(echo $ipm | cut -d/ -f1)
			kubectl exec $pod -- sh -c \
				"echo | nc -w1 $ip 6000 | grep $nsc" || tdie "$pod $ip"
		done
	done
	test $pods -gt 0 || tdie "No pods app=$nsc"
}

cmd_tcase_external_tcp() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "External TCP to the NSCs $nsc"
	local ipm ip
	for ipm in $(cat /tmp/adr); do
		ip=$(echo $ipm | cut -d/ -f1)
		echo | nc -w1 $ip 6000 | grep $nsc || tdie "$pod $1 $2"
	done
}

cmd_tcase_stop_tcp_servers() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Stop TCP servers in NSCs $nsc"
	stop_nc_server $nsc
}

cmd_tcase_internal_udp() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "Internal pod-to-pods UDP $nsc"
	local pods=0 pod ipm ip
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		pods=$((pods + 1))
		tlog "IPv4 from $pod"
		# The server dies after one connect so always start new ones
		start_nc_server $nsc "-u"
		for ipm in $(cat /tmp/adr); do
			ip=$(echo $ipm | cut -d/ -f1)
			echo $ip | grep -q : && continue
			kubectl exec $pod -- sh -c \
				"echo | nc -w1 -u $ip 6000 | grep $nsc" || tdie "$pod $ip"
		done
	done
	test $pods -gt 0 || tdie "No pods app=$nsc"
	pods=0
	for pod in $(kubectl get pods -l app=$nsc -o name); do
		pods=$((pods + 1))
		tlog "IPv6 from $pod"
		# The server dies after one connect so always start new ones
		start_nc_server $nsc "-u"
		for ipm in $(cat /tmp/adr); do
			ip=$(echo $ipm | cut -d/ -f1)
			echo $ip | grep -q : || continue
			kubectl exec $pod -- sh -c \
				"echo | nc -w1 -u $ip 6000 | grep $nsc" || tdie "$pod $ip"
		done
	done
	test $pods -gt 0 || tdie "No pods app=$nsc"
}

cmd_tcase_external_udp() {
	local nsc=nsc-kernel
	test -n "$1" && nsc=$1
	tcase "External UDP to the NSCs $nsc"
	local ipm ip
	start_nc_server $nsc "-u"
	for ipm in $(cat /tmp/adr); do
		ip=$(echo $ipm | cut -d/ -f1)
		echo $ip | grep -q : && continue
		tlog "UDP to $ip"
		echo | nc -w1 -u $ip 6000 | grep $nsc || tdie "$ip"
	done
	start_nc_server $nsc "-u"
	for ipm in $(cat /tmp/adr); do
		ip=$(echo $ipm | cut -d/ -f1)
		echo $ip | grep -q : || continue
		tlog "UDP to $ip"
		echo | nc -w1 -u $ip 6000 | grep $nsc || tdie "$ip"
	done
}

cmd_tcase_vpp_version() {
	tcase "VPP version"
	local pod=$(kubectl get pods -l app=forwarder-vpp -o name | head -1)
	mkdir -p $tmp
	kubectl exec $pod -- vppctl show version > $tmp/out 2> $tmp/err
	cat $tmp/err $tmp/out
	grep -qF 'vpp v' $tmp/out || tdie
	tlog "$(cat $tmp/out)"
	return 0
}

. /etc/profile
. /usr/lib/xctest
indent='  '

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
