#! /bin/sh
##
## nsm_test --
##
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$
yamld=/etc/kubernetes/nsm-next-gen

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

##  env
##    Print environment.
##
cmd_env() {
	test "$cmd" = "env" && set | grep -E '^(__.*|ARCHIVE)='
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}
cmd_tcase_init_interface() {
	if test -z "$INTERFACE" -o "$INTERFACE" = "eth1"; then
		return 0
	fi
	tcase "Initiating interface [$INTERFACE]"
	local n=$(echo $INTERFACE | sed -e 's,eth,,')
	local i=$(mynode)
	local addr="10.10.$n.$i"
	test -n "$IPV6_PREFIX" || IPV6_PREFIX=1000::1:
	ip link set up dev $INTERFACE
	ip addr add $addr/24 dev $INTERFACE
	ip -6 addr add ${IPV6_PREFIX}$addr/120 dev $INTERFACE
}

cmd_tcase_start_spire() {
	tcase "Start spire"

	$kubectl apply -f $yamld/spire.yaml
	kubectl="kubectl -n spire"
	test_daemonset spire-agent 180
	
	# https://github.com/networkservicemesh/deployments-k8s#how-to-register-nsm-spire-entry
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/spire/sa/spire-agent \
		-selector k8s_sat:cluster:nsm-cluster \
		-selector k8s_sat:agent_ns:spire \
		-selector k8s_sat:agent_sa:spire-agent \
		-ttl 72000 \
		-node || tdie
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/nsm-system/sa/default \
		-parentID spiffe://example.org/ns/spire/sa/spire-agent \
                -ttl 72000 \
		-selector k8s:ns:nsm-system \
		-selector k8s:sa:default || tdie	
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/nsm-system/sa/default \
		-parentID spiffe://example.org/ns/spire/sa/spire-agent \
                -ttl 72000 \
		-selector k8s:ns:default \
		-selector k8s:sa:default || tdie
}

cmd_tcase_start_nsm_next_gen() {
	test -n "$NSM_FORWARDER" || NSM_FORWARDER=vpp
	test -n "$NSM_REGISTRY" || NSM_REGISTRY=memory
	tcase "Start nsm. Forwarder=$NSM_FORWARDER, Registry=$NSM_REGISTRY"
	if test "$NSM_FORWARDER" = "generic"; then
		if test -n "$NSM_FORWARDER_CALLOUT"; then
			tlog "FORWARDER_CALLOUT=$NSM_FORWARDER_CALLOUT"
			sed -i -e "s,/bin/forwarder.sh,$NSM_FORWARDER_CALLOUT," $yamld/forwarder-generic.yaml
		fi
		if test -n "$INTERFACE"; then
		    tlog "interface changed to $INTERFACE"
			sed -i -e "s,eth1,$INTERFACE," $yamld/forwarder-generic.yaml
		else
			sed -i -e "s,eth1,," $yamld/forwarder-generic.yaml
		fi
	fi

	$kubectl apply -f $yamld/registry-$NSM_REGISTRY.yaml
	$kubectl apply -f $yamld/registry-service.yaml
	$kubectl apply -f $yamld/nsmgr.yaml
	$kubectl apply -f $yamld/forwarder-$NSM_FORWARDER.yaml

	test_daemonset nsmgr 120
    test_deployment nsm-registry 30
	test_daemonset forwarder-$NSM_FORWARDER 30
}

cmd_tcase_start_forwarder_vlan() {
    NSM_FORWARDER=vlan
    cmd_tcase_start_forwarder
}

cmd_tcase_start_forwarder_generic() {
	NSM_FORWARDER=generic
	cmd_tcase_start_forwarder
}

cmd_tcase_start_forwarder() {
	test -n "$NSM_FORWARDER" || NSM_FORWARDER=vpp
	tcase "Start Forwarder=$NSM_FORWARDER"
	if test "$NSM_FORWARDER" = "generic"; then
		if test -n "$NSM_FORWARDER_CALLOUT"; then
			tlog "FORWARDER_CALLOUT=$NSM_FORWARDER_CALLOUT"
			sed -i -e "s,/bin/forwarder.sh,$NSM_FORWARDER_CALLOUT," $yamld/forwarder-generic.yaml
		fi
		if test -n "$INTERFACE"; then
		    tlog "interface changed to $INTERFACE"
			sed -i -e "s,eth1,$INTERFACE," $yamld/forwarder-generic.yaml
		else
			sed -i -e "s,eth1,," $yamld/forwarder-generic.yaml
		fi
	fi
	$kubectl apply -f $yamld/forwarder-$NSM_FORWARDER.yaml
	test_daemonset forwarder-$NSM_FORWARDER 30
}

cmd_tcase_start_nsc_nse() {
	test -n "$NSM_NSE" || NSM_NSE=icmp-responder
	if test -n "$NSE_HOST"; then
		sed -i -e "s,vm-003,$NSE_HOST," $yamld/nse-$NSM_NSE.yaml
	else
		NSE_HOST=vm-003
	fi
	local nsc_label="nsm-1"
	local separator="\?"
	local nsc_yaml=$yamld/nsc.yaml
	if test -n "$NSM_VLAN" -a -z $NSM_NO_VLAN_MECH; then
	        tlog "NSC; using vlan mechanism"
	        nsc_yaml=$yamld/nsc-vlan.yaml
	fi
	if test -n "$NSM_SELECT_FORWARDER"; then
		# alter service label in nsc config
		tlog "NSC; prefer forwarder-$NSM_SELECT_FORWARDER"
		sed -i -e "s,${nsc_label}.*,${nsc_label}${separator}forwarder=forwarder-$NSM_SELECT_FORWARDER," ${nsc_yaml}
	fi
	if test -n "$NSM_NSE_SELECT_FORWARDER"; then
		# alter config of nse to contain proper NSE_LABELS
		tlog "NSE; prefer forwarder-$NSM_NSE_SELECT_FORWARDER"
	        if grep -q NSE_LABELS $yamld/nse-$NSM_NSE.yaml; then
			tlog "source nse-$NSM_NSE.yaml contains NSE_LABELS"
			# find line with NSM_LABELS and leave it intact while replacing the "value" part in the next line
			sed -i -e "/^\( *\)- name: NSE_LABELS/{n;s/value:.*/value: forwarder:forwarder-$NSM_NSE_SELECT_FORWARDER/;}" $yamld/nse-$NSM_NSE.yaml
		else
			tlog "no NSE_LABELS in source nse-$NSM_NSE.yaml"
			local indent="  "
			# find line with "env:" and leave it intact, then add two new lines to cover NSE_LABELS with valid indentation 
			sed -i -e "s,^\( *\)env:,&\n\1${indent}- name: NSE_LABELS\n\1${indent}${indent}value: forwarder:forwarder-$NSM_NSE_SELECT_FORWARDER," $yamld/nse-$NSM_NSE.yaml
		fi
	fi
	tcase "Start the nsc and nse-$NSM_NSE on $NSE_HOST"
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f ${nsc_yaml}
	test_deployment nsc 60
}

cmd_tcase_check_interfaces() {
	tcase "Check injected interfaces"
	mkdir -p $tmp
	local pod iface inet

	pod=$(get_pod app=nsc)
	tex kubectl exec $pod -- ifconfig | grep -B1 169.254. > $tmp/nsc || tdie NSC
	iface=$(head -1 $tmp/nsc | cut -d ' ' -f1)
	inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/nsc)
	tlog "NSC; $iface, $inet"

	pod=$(get_pod app=nse)
	tex kubectl exec $pod -- ifconfig | grep -B1 169.254. > $tmp/nse || tdie NSE
	iface=$(head -1 $tmp/nse | cut -d ' ' -f1)
	inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/nse)
	tlog "NSE; $iface, $inet"

	pod=$(get_pod app=nsc)
	tlog "Ping $inet from NSC ($pod)"
	kubectl exec $pod -- ping -c1 -W1 $inet || tdie "Ping nsc->nse"
}

cmd_tcase_start_nsc_nse_ipv6() {
	tcase "Start the nsc and nse for IPv6"
	test "$NSM_NSE" = "generic" || tdie "Generic NSM_NSE must be used"
	sed -i -e 's,169.254.0.0/24,3000::169.254.0.0/120,' $yamld/nse-$NSM_NSE.yaml
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f $yamld/nsc.yaml
	test_deployment nsc 60
}

cmd_tcase_start_nsc_nse_l2() {
	tcase "Start the nsc and nse with L2 IPAM"
	test "$NSM_NSE" = "generic" || tdie "Generic NSM_NSE must be used"
	sed -i -e 's,value: "True",value: "False",' $yamld/nse-$NSM_NSE.yaml
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f $yamld/nsc-10.yaml
	test_deployment nsc 60
}

cmd_tcase_check_interfaces_ipvlan() {
	tcase "Check IPVLAN interfaces"
	local pod
	for pod in $(kubectl get pods -l app=nsc -o name); do
		tex kubectl exec $pod -- ip link show nsm-1 2>&1 || tdie $pod
	done
	pod=$(kubectl get pods -l app=nse -o name | head -1)
	local i
	for i in $(seq 1 10); do
		kubectl exec $pod -- ping -c1 -W1 169.254.0.$i || die "ping 169.254.0.$i"
	done
}

cmd_tcase_ping_interfaces_vlan() {
    tcase "Ping VLAN interface addresses"
    mkdir -p $tmp
    local pod iface inet inet6

    for pod in $(kubectl get pods -l app=nsc -o name); do
	if test -z "$inet6"; then
	    tmp_file=ip-$(basename $pod)
	    tex kubectl exec $pod -- ip address show nsm-1 > $tmp/$tmp_file || tdie $pod
	    inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/$tmp_file | head -1|cut -f1 -d/)
	    inet6=$(awk '/inet6/{print $2}' $tmp/$tmp_file | grep '100:' | cut -f1 -d/)
	else
	    tlog "Ping $inet6 from NSC ($pod)"
	    kubectl exec $pod -- ping6 -c1 -W1 $inet6 || tdie "Ping6 nsc ->nsc"
	    tlog "Ping $inet from NSC ($pod)"
	    kubectl exec $pod -- ping -c1 -W1 $inet || tdie "Ping nsc->nsc"
	fi
    done
}
cmd_tcase_check_interfaces_vlan() {
	tcase "Check VLAN interfaces"
	mkdir -p $tmp
	local pod iface inet inet6

	for pod in $(kubectl get pods -l app=nsc -o name); do
	    tmp_file=ip-$(basename $pod)
	    tex kubectl exec $pod -- ip address show nsm-1 > $tmp/$tmp_file || tdie $pod
	    inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/$tmp_file | head -1)
	    inet6=$(awk '/inet6/{print $2}' $tmp/$tmp_file | grep '100:')
	    tex kubectl exec $pod -- ip route show 169.254.0.0/24 > $tmp/$tmp_file
	    route=$(cat $tmp/$tmp_file)
	    vlanconf=$(kubectl exec $pod -- tail -1 /proc/net/vlan/config)
	    tlog "NSC $pod; nsm-1, $inet, $inet6"
	    tlog "        Route: $route"
	    tlog "        ---------------------------------"
	    tlog "        Vlan Config"
	    tlog "        INTERFACE | VLANID | BASE"
	    tlog "        $vlanconf"
	done
	pod=$(kubectl get pods -l app=nse -o name | head -1)
	tex kubectl exec $pod -- ip link show | grep -q icmp-respo && tdie $pod
	tlog "NSE $pod; no nsm interface created"
}

cmd_tcase_check_interfaces_multi() {
	if test -n "$NSM_SELECT_FORWARDER" -a "$NSM_SELECT_FORWARDER" = "kernel" || \
	test -z "$NSM_SELECT_FORWARDER" -a -n "$NSM_NSE_SELECT_FORWARDER" -a "$NSM_NSE_SELECT_FORWARDER" = "kernel"; then
		cmd_tcase_check_interfaces_vlan
	else
		cmd_tcase_check_interfaces
	fi
}

. /etc/profile
test -r /usr/lib/xctest && . /usr/lib/xctest
indent='  '

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
